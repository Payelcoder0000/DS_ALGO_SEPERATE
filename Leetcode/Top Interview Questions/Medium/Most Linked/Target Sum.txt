You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 


Solution:

class Solution {
    
    HashMap<String,Long> mem = new HashMap<String,Long>();
    public long ways(int[] nums,int n,int sum,int S,int pos)
    {
        if(n==pos)
            return sum==S?1:0;
        String key = Integer.toString(pos) + "*" + Integer.toString(sum);
        if(mem.containsKey(key))
            return mem.get(key);
            
        long val = ways(nums,n,sum+nums[pos],S,pos+1) + ways(nums,n,sum-nums[pos],S,pos+1);
        mem.put(key,val);
        return val;
    }
    public int findTargetSumWays(int[] nums, int target) {
        
        int n = nums.length;
        if(n==0)
            return 0;
        
        return (int)(ways(nums,n,nums[0],target,1) + ways(nums,n,-nums[0],target,1));
        
    }
}