Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []




Solution:


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode h) {
        
          if (h == null || h.next == null) {
           return h;
       }

       // get the middle of the list
       ListNode middle = getMiddle(h);
       ListNode nextofmiddle = middle.next;

       // set the next of middle ListNode to null
       middle.next = null;

       // Apply mergeSort on left list
       ListNode left = sortList(h);

       // Apply mergeSort on right list
       ListNode right = sortList(nextofmiddle);

       // Merge the left and right lists
       ListNode sortedlist = sortedMerge(left, right);
       return sortedlist;
        
    }
    
    ListNode sortedMerge(ListNode head1, ListNode head2)
    { 
        ListNode merged = new ListNode(-1);
        ListNode temp = merged;
      
        // While head1 is not null and head2
        // is not null
        while (head1 != null && head2 != null) {
            if (head1.val < head2.val) {
                temp.next = head1;
                head1 = head1.next;
            }
            else {
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }
      
        // While head1 is not null
        while (head1 != null) {
            temp.next = head1;
            head1 = head1.next;
            temp = temp.next;
        }
      
        // While head2 is not null
        while (head2 != null) {
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next;
        }
        return merged.next;
    }
    
    public static ListNode getMiddle(ListNode head)
    {
        if (head == null)
            return head;

        ListNode slow = head, fast = head;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }


}


Time Complexity: O(n*log n)

Space Complexity: O(log n)