There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]



Solution:

class Solution {
    
     public int[] findOrder(int numCourses, int[][] prerequisites) {
	        
	        int n=prerequisites.length;
	        ArrayList[] graph = new ArrayList[numCourses];
         
	        for(int i=0;i<numCourses;i++)
	            graph[i] = new ArrayList();
	        
	        //Make adjacecncy list
	        for(int i=0;i<n;++i)
	            graph[prerequisites[i][1]].add(prerequisites[i][0]);
	        
	        //Detect CYCLE...If present then return empty array
	        int[] ans = new int[numCourses];
	        
	        if(detectCycle(graph,numCourses))
	            return new int[0];        
	        
	        //Find toposort and store it in stack
	        Stack<Integer> mystack = new Stack<>();
	        Boolean[] visited = new Boolean[numCourses];
	        Arrays.fill(visited,false);
	        
	        //Apply DFS and find topological sort
	        for(int i=0;i<numCourses;++i)
	            if(!visited[i])
	                dfs(graph,i,visited,mystack);
	        
	        int i=0;
	        while(!mystack.empty())
	        {
	            ans[i++] = mystack.peek();
	            mystack.pop();
	        }
	        return ans;
	    }
	        
	
	private void dfs(ArrayList[] adj, int v, Boolean[] visited, Stack<Integer> mystack) {
		// TODO Auto-generated method stub
		 visited[v] = true;
	        for(int i=0;i<adj[v].size();++i)
	            if(!visited[(int)adj[v].get(i)])
	                dfs(adj,(int)adj[v].get(i),visited,mystack);
	        
	        mystack.push(v);
		
	}


	private boolean detectCycle(ArrayList[] adj, int n) {
		// TODO Auto-generated method stub
		int[] visited = new int[n];
	        for(int i=0;i<n;++i)
	            if(visited[i] == 0)
	                if(detectCycle_util(adj,visited,i))
	                    return true;
	        return false;
	}


	private boolean detectCycle_util(ArrayList[] adj, int[] visited, int v) {
		// TODO Auto-generated method stub
		if(visited[v]==1)
            return true;
        if(visited[v]==2)
            return false;
        
        visited[v]=1;   //Mark current as visited
        for(int i=0;i<adj[v].size();++i)
            if(detectCycle_util(adj,visited,(int)adj[v].get(i)))
                return true;
        
        visited[v]=2;   //Mark current node as processed
        return false;
	}

}


https://www.youtube.com/watch?v=qe_pQCh09yU