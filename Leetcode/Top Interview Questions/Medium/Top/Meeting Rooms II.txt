Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.


Example

Input: intervals = [(0,30),(5,10),(15,20)]
Output: 2
Explanation:
We need two meeting rooms
room1: (0,30)
room2: (5,10),(15,20)



Solution:


public static int minMeetingRooms(Interval[] intervals) {
		if(intervals == null || intervals.length == 0)
			return 0;
		Arrays.sort(intervals, (a,b) -> a.start - b.start);
		PriorityQueue<Interval> minHeap = new PriorityQueue<>((a,b) -> a.end - b.end);
		minHeap.add(intervals[0]);
		for(int i=1; i<intervals.length; i++) {
			Interval current = intervals[i];
			Interval earliest = minHeap.remove();
			if(current.start >= earliest.end)
				earliest.end = current.end;
			else
				minHeap.add(current);
			
			minHeap.add(earliest);
		}
		
		return minHeap.size();
		
	}