Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1


Soln.

class Solution {
    
    private static int search(int[] arr, int start, int end, int x) {

		if(end >= start) {
		int mid = start + (end-start)/2; 
		if(arr[mid] ==x) return mid;
		if(x< arr[mid]) return search(arr, start, mid-1, x);
		else if( x> arr[mid]) return search(arr, mid+1, end, x);
        
		}

        return start;
        
	}
    public int searchInsert(int[] nums, int target) {
        
        int value = search(nums, 0, nums.length-1, target);
        return value;
        
    }
}