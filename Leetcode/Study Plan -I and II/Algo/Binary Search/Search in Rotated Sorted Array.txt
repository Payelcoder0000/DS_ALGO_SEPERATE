There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 
Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:

Input: nums = [1], target = 0
Output: -1


Solution:

class Solution {
    public int search(int[] nums, int target) {
        
        int n = nums.length;
        int result = search(nums,0 , n-1, target);
        return result;
    }
    
    private static int search(int[] arr, int start, int end, int x) {
		
		if(start > end)
        return -1;
        
		int mid = start + (end - start)/2; 
		
		if(arr[mid] ==x) return mid;
        if(arr[start]<=arr[mid]){
            
             if (x >= arr[start] && x <= arr[mid])
                return search(arr, start, mid - 1, x);
            return search(arr, mid + 1, end, x);
            
        }
        if (x >= arr[mid] && x <= arr[end])
            return search(arr, mid + 1, end, x);
        return search(arr, start, mid - 1, x);
		
	}
}
 