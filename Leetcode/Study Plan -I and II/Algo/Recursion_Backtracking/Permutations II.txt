Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


Solution:

Big (Using HashSet :: removing duplicates):

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        
        List<List<Integer>> result = new ArrayList<>();
        
        if(nums == null || nums.length == 0) return result;
        
        Set<List<Integer>> set = new HashSet<>();
        
        permutationHelper(set, nums, 0);
        
        Iterator<List<Integer>> it = set.iterator();
        
        while(it.hasNext()){
            
            result.add(it.next());
            
        }
        
        return result;
        
    }
    
    public void permutationHelper(Set<List<Integer>> result, int[] nums, int start){
        
        if(start == nums.length-1){
           List<Integer> list = new ArrayList<Integer>();
            for(int i: nums) list.add(i);
            
            result.add(list);
            return;
        }
        
        for(int i=start; i< nums.length; i++){
            swap(nums,start,i);
            permutationHelper(result, nums, start+1);
            swap(nums,start,i);
        }
        
       
    }
    
     public void swap(int[] nums, int x, int y){
            int t = nums[x];
            nums[x] = nums[y];
            nums[y] = t;
        }
}


--------------------------------------------------


Small: Using HashMap:

/**
 * Recursive Backtracking using countMap.
 *
 * Time Complexity: O(N * N!). Number of permutations = P(N,N) = N!. Each
 * permutation takes O(N) to construct
 *
 * T(n) = n*T(n-1) + O(n)
 * T(n-1) = (n-1)*T(n-2) + O(n)
 * ...
 * T(2) = (2)*T(1) + O(n)
 * T(1) = O(n)
 *
 * Above equations can be added together to get:
 * T(n) = n (1 + n + n*(n-1) + ... + (n....2) + (n....1))
 *      = n (P(n,0) + P(n,1) + P(n,1) + ... + P(n,n-1) + P(n,n))
 *      = n * Floor(e*n!)
 *      = O(N * N!)
 *
 * Space Complexity: O(N). Recursion stack + countMap + tempList
 *
 * N = Length of input array.
 */
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }

        HashMap<Integer, Integer> countMap = new HashMap<>();
        for (int n : nums) {
            countMap.put(n, countMap.getOrDefault(n, 0) + 1);
        }

        permuteUniqueHelper(result, nums.length, countMap, new ArrayList<>());
        return result;
    }

    private void permuteUniqueHelper(List<List<Integer>> result, int inputLength, HashMap<Integer, Integer> countMap, List<Integer> tempList) {
        if (tempList.size() == inputLength) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int num : countMap.keySet()) {
            int count = countMap.get(num);
            if (count == 0) {
                continue;
            }
            countMap.put(num, count - 1);
            tempList.add(num);
            permuteUniqueHelper(result, inputLength, countMap, tempList);
            tempList.remove(tempList.size() - 1);
            countMap.put(num, count);
        }
    }
}
