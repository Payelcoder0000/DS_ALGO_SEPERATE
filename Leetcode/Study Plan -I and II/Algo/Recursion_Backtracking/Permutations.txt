Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Solution:

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>> result = new ArrayList<>();
        
        if(nums == null || nums.length == 0) return result;
        
        permutationHelper(result, nums, 0);
        
        return result;
    }
    
    public void permutationHelper(List<List<Integer>> result, int[] nums, int start){
        
        if(start == nums.length-1){
            List<Integer> list = new ArrayList<Integer>();
            for(int i: nums) list.add(i);
            
            result.add(list);
            return;
        }
        
        for(int i=start; i< nums.length; i++){
            swap(nums,start,i);
            permutationHelper(result, nums, start+1);
            swap(nums,start,i);
        }
        
       
    }
    
     public void swap(int[] nums, int x, int y){
            int t = nums[x];
            nums[x] = nums[y];
            nums[y] = t;
        }
}