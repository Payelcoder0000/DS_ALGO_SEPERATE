You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

Example 2:
Input: root = []
Output: []


Solution:

Big:

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/


class Solution {
    private int height(Node node) {
		
		if(node == null) return 0;
		else {
			int lheight = height(node.left);
			int rheight = height(node.right);
			
			if(lheight > rheight) 
				return (lheight +1);
			else
				return (rheight+1);
			
		}
		
	}

private void printCurrentLevel(Node node, ArrayList<Node> set, int level) {
	
		if(node == null) return;
		if(level == 1) {
            //System.out.print("value: "+ node.val+" ");
			set.add(node);
		}
		else if(level >1) {
			printCurrentLevel(node.left, set, level-1);
			printCurrentLevel(node.right, set, level-1);
			 
		}
		
	}


    public Node connect(Node root) {
        
        int h = height(root), j=0;
        for(int i=1; i<=h; i++) {
            ArrayList<Node> list = new ArrayList<>();
			printCurrentLevel(root, list, i);
            
            for(j=0; j<list.size()-1;j++){
                System.out.print(list.get(j).val+" ");
                list.get(j).next = list.get(j+1);
            }
	       list.get(j).next = null;
		}
        return root;
    }
}


-------------------------------------

DFS & BFS approach || Java easy to understand commented explanation

Method 1: DFS

public Node connect(Node root) {
    dfs(root);
    return root;
}

private void dfs(Node root) {
    // base case
    if (root == null) return;
    // if root is not a leaf node
    if (root.left != null) {
        // add reference of immediate right node in current depth level
        root.left.next = root.right;
        if (root.next != null) {
            root.right.next = root.next.left;
        }
    }
    // traverse left and right subtree
    dfs(root.left);
    dfs(root.right);
}
Method 2: BFS

public Node connect(Node root) {
    if (root == null) return root;

    Queue<Node> q = new LinkedList<>();
    int depth = 0;  // current depth level in binary tree
    q.add(root);    // adding root of the binary tree
    while (!q.isEmpty()) {
        Node prev = q.poll();   // take out the left most element of current depth
        // adding their children into the queue
        if (prev.left != null && prev.right != null) {
            q.add(prev.left);
            q.add(prev.right);
        }
        // depth "d" has 2^d number of nodes
        for (int i = 1; i < (1 << depth); i++) {
            Node curr = q.poll();
            prev.next = curr;   // adding next to previous node in current depth level
            prev = curr;        // making current as previous
            // adding children into the queue
            if (prev.left != null && prev.right != null) {
                q.add(prev.left);
                q.add(prev.right);
            }
        }
        // going one level deep
        depth++;
    }
    // returning root of the binary tree
    return root;
}