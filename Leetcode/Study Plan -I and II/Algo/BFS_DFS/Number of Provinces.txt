There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3


Solution:

class Solution {
    public int findCircleNum(int[][] isConnected) {
        
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int components = 0;
        for(int vertex = 0; vertex < n; vertex++) {
            if(!visited[vertex]) {
                visited[vertex] = true;
                components++;
                visitNeighbors(vertex, isConnected, visited);
            }
        }
        return components;
    }
    
    private void visitNeighbors(int vertex, int[][] isConnected, boolean[] visited) {
        for(int v = 0; v < isConnected.length; v++) {
            if(isConnected[vertex][v] == 1 && !visited[v]) {
                visited[v] = true;
                visitNeighbors(v, isConnected, visited);
            }
        }
    }
        
}