Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


Solution:

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        
        List<Integer> list = new ArrayList<Integer>();
        
        if(s.length() == 0 || p.length() > s.length()) return list;
        
        int x= p.length(), y = s.length();
        int arr1[] = new int[26];
        int arr2[] = new int[26];
        
        
        for(int i=0;i<x;i++){
            arr1[p.charAt(i) - 'a']++;
            arr2[s.charAt(i) - 'a']++;
        }
        int j =0;
        for(j=x; j<y; j++){
            if(Arrays.equals(arr1,arr2)) 
                list.add(j-x);
            arr2[s.charAt(j-x) - 'a']--;
            arr2[s.charAt(j) - 'a']++;
        }
        if(Arrays.equals(arr1,arr2)) 
                list.add(j-x);
        
        return list;
        
    }
}