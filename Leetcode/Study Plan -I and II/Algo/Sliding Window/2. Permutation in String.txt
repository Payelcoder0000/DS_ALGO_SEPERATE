Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


Solution:

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        
        if(s1.length() > s2.length() || s2.length() ==0)  return false;
        if(s1.length() ==0) return true;
        
        int x = s1.length();
        int y = s2.length();
        
        int[] arr1 = new int[26];
        int[] arr2 = new int[26];
        
        for(int i=0; i<x; i++){
            arr1[s1.charAt(i) - 'a']++;
            arr2[s2.charAt(i) - 'a']++;
        }
        
        for(int i=x; i<y; i++){
            if(Arrays.equals(arr1,arr2)) return true;
            arr2[s2.charAt(i-x) - 'a']--;
            arr2[s2.charAt(i) - 'a']++;
        }
        if(Arrays.equals(arr1, arr2)) return true;
        else return false;
        
    }
}


Video: https://www.youtube.com/watch?v=6gRj_FH3MsA