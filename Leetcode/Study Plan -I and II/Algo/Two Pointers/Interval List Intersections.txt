You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].

 

Example 1:

Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Example 2:

Input: firstList = [[1,3],[5,9]], secondList = []
Output: []

Example 3:

Input: firstList = [], secondList = [[4,8],[10,12]]
Output: []

Example 4:

Input: firstList = [[1,7]], secondList = [[3,10]]
Output: [[3,7]]

Solution:

class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        
        List<int[]> list = new ArrayList<>();
        int Aptr =0, Bptr=0;
        int sizeA = A.length;
        int sizeB = B.length;
        
        while(Aptr<sizeA && Bptr<sizeB){
            
            if(B[Bptr][0] <= A[Aptr][1] && A[Aptr][0] <=B[Bptr][1])
            {
                int arr[] = new int[2];
                arr[0] =  Math.max(A[Aptr][0], B[Bptr][0]);
                arr[1] = Math.min(A[Aptr][1], B[Bptr][1]);
                list.add(arr);
            }
            if(A[Aptr][1]>B[Bptr][1])
                Bptr+=1;
            else
                Aptr+=1;
        }
        
       return list.toArray(new int[list.size()][]); 
        
    }
}


Complexity Analysis

Time Complexity: O(M + N)O(M+N), where M, NM,N are the lengths of A and B respectively.

Space Complexity: O(M + N)O(M+N), the maximum size of the answer.