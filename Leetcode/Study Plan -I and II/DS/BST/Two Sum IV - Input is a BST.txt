Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false

Example 3:

Input: root = [2,1,3], k = 4
Output: true

Example 4:

Input: root = [2,1,3], k = 1
Output: false

Example 5:

Input: root = [2,1,3], k = 3
Output: true
 
Solution:

Short:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    public boolean findTarget(TreeNode root, int k) {
    
        return convertTree(new HashSet<>(), root, k);

    }
    
    public boolean convertTree(Set<Integer> set, TreeNode root, int k){
        if(root==null) return false;
       
        if(set.contains(k-root.val)) return true;
        set.add(root.val);
        return convertTree(set,root.left,  k) || convertTree( set, root.right, k);
        
    }
}

-------------------------


Long: 
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        
        ArrayList<Integer> list = new ArrayList<Integer>();
        list = convertTree(list, root);
        for(int i=0;i<list.size();i++){
            for(int j=i+1;j<list.size();j++){
                if(list.get(i) + list.get(j) == k) return true;
            }
        }
        return false;
    }
    
    public ArrayList<Integer> convertTree(ArrayList<Integer> list, TreeNode root){
        if(root!=null){
            convertTree(list, root.left);
            list.add(root.val);
            convertTree(list, root.right);
        }
        return list;
    }
}