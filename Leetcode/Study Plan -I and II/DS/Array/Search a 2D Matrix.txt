Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


Solution:


class Solution {
    
    
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int M = matrix.length;
        int N = matrix[0].length;
        
        int low = 0;
        int high = M - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
 
            // if the element lies in the range
            // of this row then call
            // 1-D binary search on this row
            if (target >= matrix[mid][0] && target <= matrix[mid][N - 1]) {
                return binarySearch1D(matrix[mid], target);
            }
 
            // if the element is less then the
            // starting element of that row then
            // search in upper rows else search
            // in the lower rows
            if (target < matrix[mid][0]) {
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
 
        // if not found
        return false;
        
    }
    
    static boolean binarySearch1D(int arr[], int K)
    {
        int N = arr.length;
        int low = 0;
        int high = N - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
 
            // if element found return true
            if (arr[mid] == K) {
                return true;
            }
 
            // if middle less than K then
            // skip the left part of the
            // array else skip the right part
            if (arr[mid] < K) {
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }
 
        // if not found return false
        return false;
    }
 
}


---------------------------------------------------------

Another approach(mine with list)

class Solution {
    public boolean binarySearchCheck(int[] arr, int start, int end, int x){
        
		if(end >= start) {
		int mid = start + (end - start)/2; 
		
		if(arr[mid] ==x) return true;
		if(x< arr[mid]) return binarySearchCheck(arr, start, mid-1, x);
		else if( x> arr[mid]) return binarySearchCheck(arr, mid+1, end, x);
		}
		return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int m = matrix.length;
        int n= matrix[0].length;
        
        int temp[] = new int[m*n];
        int k=0;
        for(int i=0;i<m;i++){
            for(int j=0; j<n; j++){
                temp[k] = matrix[i][j];
                k++;
            }
        }
        boolean check = binarySearchCheck(temp, 0, temp.length-1, target);
        return check;
    }
}