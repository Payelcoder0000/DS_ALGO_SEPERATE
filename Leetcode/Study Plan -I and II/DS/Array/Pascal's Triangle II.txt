Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]


Solution:

Big : Iterative

class Solution {
    public List<Integer> getRow(int rowIndex) {
        
        List<List<Integer>> list= new ArrayList<>();
	        for(int i=1;i<=rowIndex+1;i++){
	            
	            List<Integer> list1 = new ArrayList<Integer>();
	            List<Integer> prevRow = new ArrayList<Integer>();
	            list1.add(1);
	            if(rowIndex+1 != 1 && i!=1) {
		            for(int j=1;j<=i-2;j++){
		            	prevRow = list.get(i-1-1);
		                list1.add(prevRow.get(j-1)+ prevRow.get(j));
		            }
		            list1.add(1);
	            }
	            
	            list.add(list1);
	        }
	        return list.get(rowIndex);
        
    }
}

-----------------------------------------

Short: Using DP

class Solution {
    public List<Integer> getRow(int rowIndex) {
        
        List<Integer> list= new ArrayList<>();
	    rowIndex++;
        long num =1;
        for(int i=1; i<= rowIndex; i++){
            list.add((int)num);
            num = num * (rowIndex-i)/i;
        }
        
        return list;
        
    }
}