Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true


Solution:

class Solution {
    public boolean isValidSudoku(char[][] board) {
           int m = board.length;
	        int n = board[0].length;
	        
	        
	        //validate for row
	        for(int i=0;i<m;i++){
	            HashSet<Character> set = new HashSet<Character>();
	            for(int j=0;j<n;j++){
	            	if(board[i][j] != '.') 
	            	{
	            
	            		if(set.contains(board[i][j]) == true) return false;
		                if(Integer.parseInt(String.valueOf(board[i][j]))<1) return false;
		                if(Integer.parseInt(String.valueOf(board[i][j]))>9) return false;
		                set.add(board[i][j]);
	            	}   
	            }
	        }
	        
	        //validate for column
	        for(int i=0;i<m;i++){
	            HashSet<Character> set = new HashSet<Character>();
	            for(int j=0;j<n;j++){
	            	if(board[j][i] != '.') {

	            		if(set.contains(board[j][i]) == true) return false;
		                if(Integer.parseInt(String.valueOf(board[j][i]))<1) return false;
		                if(Integer.parseInt(String.valueOf(board[j][i]))>9) return false;
		                set.add(board[j][i]);
	            	}
	            }
	        }
	        
	        //validate each 3X3 sqaures
	        int row=0;
	        
	        for(int r=1;r<=3;r++) {
	        	int col=0;
	        	for(int c=1;c<=3;c++){
	        		System.out.println("Starting:");
                    HashSet<Character> set = new HashSet<Character>();
		            for(int i=row;i<row+3;i++){
		                
		                for(int j=col;j<col+3;j++){
		                	if(board[i][j] != '.') {
		                		System.out.print(board[i][j]+" ");
		                		
		                		if(set.contains(board[i][j]) == true) return false;
			                    if(Integer.parseInt(String.valueOf(board[i][j]))<1) return false;
				                if(Integer.parseInt(String.valueOf(board[i][j]))>9) return false;
			                    set.add(board[i][j]);
		                	}   
		                }
		            }
		            col+=3;
		            System.out.println();
		        }
	        	row+=3;
	        }
	        
			return true;
    }
}