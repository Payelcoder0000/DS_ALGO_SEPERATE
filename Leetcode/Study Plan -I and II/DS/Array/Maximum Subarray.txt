Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


Sol.

Kadaneâ€™s Algorithm:

Initialize:
    max_so_far = INT_MIN
    max_ending_here = 0

Loop for each element of the array
  (a) max_ending_here = max_ending_here + a[i]
  (b) if(max_so_far < max_ending_here)
            max_so_far = max_ending_here
  (c) if(max_ending_here < 0)
            max_ending_here = 0
return max_so_far


-------

class Solution {
    public int maxSubArray(int[] nums) {
        
        //Using Kadane's algorithm
        
        int max_ends_here =0, max_so_far = Integer.MIN_VALUE;
        
        for(int i=0;i<nums.length;i++){
            max_ends_here += nums[i];
            if(max_ends_here > max_so_far)
                max_so_far = max_ends_here;
            if(max_ends_here<0)
                max_ends_here = 0;
        }
        
        return max_so_far;
        
    }
}

==================================

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0], sum=nums[0];
        for(int i=1; i<nums.length; i++){   
            if((sum + nums[i]) > nums[i])
                sum = sum+ nums[i];
            else sum = nums[i];
            if(sum>max)
            max = sum;
         
        }
        
        return max;
    }
}
