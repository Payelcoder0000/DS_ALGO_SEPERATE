The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

For example, "ACGAATTCCG" is a DNA sequence.
When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.

 

Example 1:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]

Example 2:

Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]


Solution:


Short: (Using HashSet)

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
               
        
    Set seen = new HashSet(), repeated = new HashSet();
    for (int i = 0; i + 10 <= s.length(); i++) {
        String ten = s.substring(i, i + 10);
        if (!seen.add(ten))
            repeated.add(ten);
    }
    return new ArrayList(repeated);
        
    }
}

====================================

Using HashMap:

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        
        List<String> repeatedSubseq = new ArrayList<>();
        
        Map<String, Integer> seen = new HashMap<String, Integer>();
        int i=0;
        while(i+10 <= s.length()){
            String subsequence = s.substring(i, i+10);
            seen.put(subsequence, seen.getOrDefault(subsequence, 0 )+1);
            if(seen.get(subsequence) == 2){
                repeatedSubseq.add(subsequence);
            }
            i++;
        }
        
        return repeatedSubseq;
        
    }
}
 