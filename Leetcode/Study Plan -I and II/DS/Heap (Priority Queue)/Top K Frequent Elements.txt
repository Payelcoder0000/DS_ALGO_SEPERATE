Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 
Answer:

Approach 1: (Using Priority Queue)
--------------------------

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // O(1) time
        if (k == nums.length) {
            return nums;
        }
        
        // 1. build hash map : character and how often it appears
        // O(N) time
        Map<Integer, Integer> count = new HashMap();
        for (int n: nums) {
          count.put(n, count.getOrDefault(n, 0) + 1);
        }

        // init heap 'the less frequent element first'
        Queue<Integer> heap = new PriorityQueue<>(
            (n1, n2) -> count.get(n1) - count.get(n2));

        // 2. keep k top frequent elements in the heap
        // O(N log k) < O(N log N) time
        for (int n: count.keySet()) {
          heap.add(n);
          if (heap.size() > k) heap.poll();    
        }

        // 3. build an output array
        // O(k log k) time
        int[] top = new int[k];
        for(int i = k - 1; i >= 0; --i) {
            top[i] = heap.poll();
        }
        return top;
    }
}

Approach 2: (Using Map)
---------------------

class Solution {
    public int[] topKFrequent(int[] arr, int k) {
        
          Map<Integer, Integer> mp
            = new HashMap<Integer, Integer>();
        int n = arr.length;
        // Put count of all the
        // distinct elements in Map
        // with element as the key & 
        // count as the value.
        for (int i = 0; i < n; i++) {
  
            // Get the count for the 
            // element if already present in the 
            // Map or get the default value which is 0.
            mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);
        }
  
        // Create a list from elements of HashMap
        List<Map.Entry<Integer, Integer> > list = new ArrayList<>(mp.entrySet());
  
        // Sort the list
        Collections.sort(list,
            new Comparator<Map.Entry<Integer, 
                                     Integer> >() 
          {
                public int compare(
                    Map.Entry<Integer, Integer> o1,
                    Map.Entry<Integer, Integer> o2)
                {
                    if (o1.getValue() == o2.getValue())
                        return o2.getKey() - o1.getKey();
                    else
                        return o2.getValue()
                            - o1.getValue();
                }
            });
  
        int[] res = new int[k];
        for (int i = 0; i < k; i++)
            res[i] = list.get(i).getKey();
        
        return res;
        
    }
}