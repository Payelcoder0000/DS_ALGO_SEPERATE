Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]


Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        
        int size=0;
        ListNode currNode = head, curr=head;
        
        while(currNode!= null){
            size++;
            currNode = currNode.next;
        }
        
        if(size == 1 && n==1) return null;
        else if(size ==2 && n==2) {
            head = head.next;
            return head;
        }
        
        int pos = size+1-n;
        if(pos ==1){
            head = head.next;
            return head;
        }
        size=0;
        
        while(size < pos-2){
            size++;
            curr = curr.next;
        }
        
        curr.next = curr.next.next;
        
        return head;
        
    }
}
 