Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 Example 1:

Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:

Input: l1 = [], l2 = []
Output: []

Example 3:

Input: l1 = [], l2 = [0]
Output: [0]

Solution:

Iterative:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        if(list1 == null)
            return list2;
        if(list2 == null)
            return list1;
        if(list1.val<list2.val)
            return mergeUtil(list1,list2);
        else
            return mergeUtil(list2, list1);
    }
    
    private ListNode mergeUtil(ListNode list1, ListNode list2){
        
        if(list1.next == null){
            list1.next = list2;
            return list1;
        }
        
        ListNode curr1 = list1, next1 = list1.next;
        ListNode curr2 = list2, next2 = list2.next;
        
        while (next1 != null && curr2 != null) {
            // if curr2 lies in between curr1 and next1
            // then do curr1->curr2->next1
            if ((curr2.val) >= (curr1.val) && (curr2.val) <= (next1.val)) {
                next2 = curr2.next;
                curr1.next = curr2;
                curr2.next = next1;
 
                // now let curr1 and curr2 to point
                // to their immediate next pointers
                curr1 = curr2;
                curr2 = next2;
            }
            else {
                // if more nodes in first list
                if (next1.next != null) {
                    next1 = next1.next;
                    curr1 = curr1.next;
                }
 
                // else point the last node of first list
                // to the remaining nodes of second list
                else {
                    next1.next = curr2;
                    return list1;
                }
            }
        }
        return list1;
            
    }
}


===============================================

Time complexity:O(n). 
As only one traversal of the linked lists is needed.
Auxiliary Space:O(1). 
As there is no space required.

Recursive:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        if(l1 == null && l2 == null) return null;
        if(l1== null && l2!= null) return l2;
        if(l1!= null && l2== null) return l1;
        
        ListNode currNode = l1;
        
        while(currNode.next != null){
            currNode = currNode.next;
        }
        currNode.next = l2;
        
        ListNode current = l1, index = null;
        
        while (current != null) {
          
            index = current.next;

            while (index != null) {
               
                if (current.val > index.val) {
                    int temp = current.val;
                    current.val = index.val;
                    index.val = temp;
                }

                index = index.next;
            }
            current = current.next;
        }
        return l1;
    }
}
 
