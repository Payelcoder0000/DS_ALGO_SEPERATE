Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false


Solution:

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        
       int n = s.length();
    boolean[] canBreak = new boolean[1 + n];
    canBreak[n] = true;
    
    for(int i = n - 1; i >= 0; --i)
    {
        for(int j = i + 1; j <= n; ++j)
        {
            if(canBreak[j] && wordDict.contains(s.substring(i, j)))
            {
                canBreak[i] = true;
                break;
            }
        }
    }
    
    return canBreak[0];
    }
}