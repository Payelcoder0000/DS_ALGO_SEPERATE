Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.
 

Solution:

Legendre's 3-square theorem:
----------------
class Solution {
    public int numSquares(int n) {
        
       int sr = (int)Math.sqrt(n);
       if((sr * sr) == n)
           return 1;
        while(n%4 ==0)
            n/=4;
        
        if(n%8==7)
            return 4;
        
        for(int i=1;i*i<=n;i++){
            int base = (int)Math.sqrt(n-i*i);
            if(base*base == (n-i*i))
                return 2;
        }
        
        return 3;
        
    }
}

Time complexity : route(n)

--------------------------------

Tabular:
-------
class Solution {
    public int numSquares(int n) {
        
       int[] dp = new int[n + 1];
       Arrays.fill(dp, Integer.MAX_VALUE);
       dp[0] = 0;
       for(int i = 0; i <= n; i++){
              dp[i] = i;
           for(int j = 1; j * j <= i; j++){
               dp[i] = Math.min(dp[i], dp[i - j*j] + 1);
            }
       }
       return dp[n];
        
    }
}

Time complexity: n*route(n)



Video: https://www.youtube.com/watch?v=1xfx6M_GqFk